name: build

on: [push, pull_request]

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-22.04, macos-14]
        compiler: [gcc, clang]
        crypto: [openssl, gnutls]
        bittorrent: [with-bt, without-bt]
        exclude:
        - os: macos-14
          crypto: gnutls
        - crypto: openssl
          bittorrent: without-bt

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4
    - name: Linux setup
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install \
          g++-12 \
          clang-15 \
          autoconf \
          automake \
          autotools-dev \
          autopoint \
          libtool \
          pkg-config \
          libssl-dev \
          libgnutls28-dev \
          libc-ares-dev \
          zlib1g-dev \
          libsqlite3-dev \
          libssh2-1-dev \
          libcppunit-dev
    - name: MacOS setup
      if: runner.os == 'macOS'
      run: |
        brew install cppunit gettext openssl@3 libssh2 c-ares sqlite3 \
          autoconf automake pkg-config libtool
        
        # 显示并验证automake版本和位置
        brew info automake
        which automake
        automake --version
        
        # 显示automake辅助文件的位置
        echo "查找automake辅助文件位置："
        find /opt/homebrew/share -name "compile" | grep automake || echo "未找到compile文件"
        find /opt/homebrew/share -name "missing" | grep automake || echo "未找到missing文件"
    - name: Setup clang (Linux)
      if: runner.os == 'Linux' && matrix.compiler == 'clang'
      run: |
        echo 'CC=clang-15' >> $GITHUB_ENV
        echo 'CXX=clang++-15' >> $GITHUB_ENV
    - name: Setup clang (MacOS)
      if: runner.os == 'macOS' && matrix.compiler == 'clang'
      run: |
        echo 'CC=clang' >> $GITHUB_ENV
        echo 'CXX=clang++' >> $GITHUB_ENV
    - name: Setup gcc (Linux)
      if: runner.os == 'Linux' && matrix.compiler == 'gcc'
      run: |
        echo 'CC=gcc-12' >> $GITHUB_ENV
        echo 'CXX=g++-12' >> $GITHUB_ENV
    - name: Setup gcc (MacOS)
      if: runner.os == 'macOS' && matrix.compiler == 'gcc'
      run: |
        echo 'CC=gcc' >> $GITHUB_ENV
        echo 'CXX=g++' >> $GITHUB_ENV

    - name: Prepare build system
      run: |
        # 确保生成所有必要的配置文件
        echo "Running autoreconf..."
        autoreconf -i
        echo "Running automake..."
        automake --add-missing || true
        echo "Running libtoolize..."
        libtoolize --force || glibtoolize --force || true
        echo "Running autopoint..."
        autopoint || echo "autopoint failed, continuing anyway"
        
        # 检查并手动创建缺失的辅助文件
        echo "检查必要的辅助文件..."
        # 检测操作系统类型
        if [ "$RUNNER_OS" == "macOS" ]; then
          # macOS特定路径和命令
          AUTOMAKE_DIRS=(
            "/opt/homebrew/share/automake-*"
            "/usr/local/share/automake-*"
            "/usr/share/automake-*"
          )
        else
          # Linux特定路径
          AUTOMAKE_DIRS=(
            "/usr/share/automake-*"
            "/usr/local/share/automake-*"
          )
        fi
        
        # 通用函数：尝试从系统中找到并复制文件
        copy_automake_file() {
          local file_name=$1
          local found=false
          
          # 检查当前文件是否已存在
          if [ -f "$file_name" ]; then
            echo "$file_name 已存在，无需创建"
            return 0
          fi
          
          echo "尝试查找 $file_name..."
          
          # 从系统目录查找文件
          for dir in "${AUTOMAKE_DIRS[@]}"; do
            if ls $dir/$file_name 1>/dev/null 2>&1; then
              newest_file=$(ls -t $dir/$file_name 2>/dev/null | head -1)
              if [ -n "$newest_file" ]; then
                echo "从 $newest_file 复制 $file_name"
                cp "$newest_file" ./$file_name
                found=true
                break
              fi
            fi
          done
          
          # 如果仍未找到，尝试从网络获取
          if [ "$found" = false ]; then
            echo "未在系统中找到 $file_name，尝试从网络获取..."
            curl -sS -o $file_name "https://raw.githubusercontent.com/autotools-mirror/automake/master/lib/$file_name" && \
            chmod +x $file_name && \
            echo "成功从网络下载 $file_name" || \
            echo "无法获取 $file_name"
          fi
        }
        
        # 复制必要的辅助文件
        copy_automake_file "compile"
        copy_automake_file "missing"
        
        # 显示当前目录中的辅助文件
        echo "查看当前辅助文件："
        ls -l compile missing install-sh config.guess config.sub ltmain.sh 2>/dev/null || echo "部分文件仍然缺失"

    - name: Set compiler flags (Linux)
      if: runner.os == 'Linux'
      run: |
        asanflags="-fsanitize=address,undefined -fno-sanitize-recover=undefined"

        CPPFLAGS="$asanflags -g3"
        LDFLAGS="$asanflags"
        echo 'CPPFLAGS='"$CPPFLAGS" >> $GITHUB_ENV
        echo 'LDFLAGS='"$LDFLAGS" >> $GITHUB_ENV

    - name: Set compiler flags (macOS)
      if: runner.os == 'macOS'
      run: |
        # macOS特定编译标志
        BREW_PREFIX=$(brew --prefix)
        echo "BREW_PREFIX=$BREW_PREFIX"
        
        # 设置OpenSSL路径
        OPENSSL_PATH="$BREW_PREFIX/opt/openssl@3"
        GETTEXT_PATH="$BREW_PREFIX/opt/gettext"
        
        CPPFLAGS="-I$OPENSSL_PATH/include -I$GETTEXT_PATH/include -g3"
        LDFLAGS="-L$OPENSSL_PATH/lib -L$GETTEXT_PATH/lib"
        
        echo 'CPPFLAGS='"$CPPFLAGS" >> $GITHUB_ENV
        echo 'LDFLAGS='"$LDFLAGS" >> $GITHUB_ENV
    - name: Disable BitTorrent
      if: matrix.bittorrent == 'without-bt'
      run: |
        FEATURE_FLAGS="$FEATURE_FLAGS --disable-bittorrent"

        echo 'FEATURE_FLAGS='"$FEATURE_FLAGS" >> $GITHUB_ENV
    - name: Configure autotools (Linux, gnutls)
      if: runner.os == 'Linux' && matrix.crypto == 'gnutls'
      run: |
        ./configure --with-gnutls --without-openssl --disable-libaria2 $FEATURE_FLAGS || { cat config.log; exit 1; }
        # 验证config.status已创建在正确位置
        ls -la config.status

    - name: Configure autotools (Linux, openssl)
      if: runner.os == 'Linux' && matrix.crypto == 'openssl'
      run: |
        ./configure --without-gnutls --with-openssl --disable-libaria2 $FEATURE_FLAGS || { cat config.log; exit 1; }
        # 验证config.status已创建在正确位置
        ls -la config.status

    - name: Configure autotools (macOS)
      if: runner.os == 'macOS'
      run: |
        # 再次确认辅助文件存在
        echo "确保auxdir辅助文件存在..."
        if [ ! -f "compile" ] || [ ! -f "missing" ]; then
          echo "缺少辅助文件，重新创建..."
          automake --add-missing --copy
          
          # 如果仍然缺失，手动从系统复制
          if [ ! -f "compile" ]; then
            AUTOMAKE_DIR=$(ls -d /opt/homebrew/Cellar/automake/*/share/automake-* | head -1)
            echo "从 $AUTOMAKE_DIR 复制compile文件"
            cp "$AUTOMAKE_DIR/compile" ./
          fi
          
          if [ ! -f "missing" ]; then
            AUTOMAKE_DIR=$(ls -d /opt/homebrew/Cellar/automake/*/share/automake-* | head -1)
            echo "从 $AUTOMAKE_DIR 复制missing文件"
            cp "$AUTOMAKE_DIR/missing" ./
          fi
        fi
        
        # 确保目录中存在这些文件
        ls -la compile missing
        
        # 配置构建
        ./configure \
          --without-openssl --without-gnutls --with-appletls \
          --disable-nls --disable-libaria2 $FEATURE_FLAGS || { cat config.log; exit 1; }
        # 验证config.status已创建在正确位置
        ls -la config.status

    - name: Fix config.status path issues
      run: |
        # 检查po/Makefile.in.in文件中的config.status路径引用
        if [ -f po/Makefile.in.in ]; then
          echo "检查并修复po/Makefile.in.in中的config.status路径..."
          
          # 显示有问题的行，帮助诊断
          echo "查找po/Makefile.in.in中的config.status引用："
          grep -n "config.status" po/Makefile.in.in || echo "未找到引用"
          
          if [ "$RUNNER_OS" == "Linux" ]; then
            # Linux版本sed命令
            # 将任何对绝对路径/config.status的引用改为相对路径
            sed -i 's|/config.status|../config.status|g' po/Makefile.in.in
            # 将./config.status改为../config.status
            sed -i 's|\./config.status|../config.status|g' po/Makefile.in.in
          else
            # macOS版本sed命令
            sed -i '' 's|/config.status|../config.status|g' po/Makefile.in.in
            sed -i '' 's|\./config.status|../config.status|g' po/Makefile.in.in
          fi
          
          # 修复po/Makefile中的路径引用
          if [ -f po/Makefile ]; then
            echo "检查并修复po/Makefile中的config.status路径..."
            
            # 显示有问题的行，帮助诊断
            echo "查找po/Makefile中的config.status引用："
            grep -n "config.status" po/Makefile || echo "未找到引用"
            
            if [ "$RUNNER_OS" == "Linux" ]; then
              # 将任何对绝对路径/config.status的引用改为相对路径
              sed -i 's|/config.status|../config.status|g' po/Makefile
              # 修复对不正确路径的引用，保留以../开头的正确引用
              sed -i 's|\([^\.]\)config.status|\1../config.status|g' po/Makefile
              sed -i 's|^\(config.status\)|../\1|g' po/Makefile
              sed -i 's|\./config.status|../config.status|g' po/Makefile
            else
              sed -i '' 's|/config.status|../config.status|g' po/Makefile
              # macOS版本修复
              sed -i '' 's|\([^\.]\)config.status|\1../config.status|g' po/Makefile
              sed -i '' 's|^\(config.status\)|../\1|g' po/Makefile
              sed -i '' 's|\./config.status|../config.status|g' po/Makefile
            fi
          fi
          
          # 在po目录创建一个指向上层config.status的符号链接，这是最干净的解决方案
          echo "在po目录中创建指向上层config.status的符号链接..."
          cd po && ln -sf ../config.status ./config.status && cd ..
          
          # 确认符号链接创建成功
          ls -la po/config.status || echo "警告：符号链接创建失败"
        else
          echo "po/Makefile.in.in不存在，跳过修复步骤"
        fi
        
        # 显示当前工作目录和关键文件
        pwd
        echo "主项目目录下的config.status:"
        ls -la config.status || echo "config.status not found"
        echo "po目录下的config.status链接或文件:"
        ls -la po/config.status || echo "po/config.status not found"
        echo "po目录下的Makefile和Makefile.in.in:"
        ls -la po/Makefile.in.in || echo "po/Makefile.in.in not found"
        ls -la po/Makefile || echo "po/Makefile not found"

    - name: Build aria2
      run: |
        # 确保生成了所有源文件并进行正确的配置
        echo "显示顶层Makefile中的程序编译目标:"
        grep "^bin_PROGRAMS" Makefile || echo "未找到bin_PROGRAMS定义"
        
        # 尝试构建，显示详细信息
        make -j"$(nproc 2> /dev/null || sysctl -n hw.ncpu)" V=1 || { echo "构建失败，退出代码: $?"; exit 1; }
        
        # 强制构建aria2c可执行文件
        echo "强制构建aria2c可执行文件..."
        cd src && make aria2c V=1
        cd ..
        
        # 检查构建结果
        echo "检查编译后的二进制文件:"
        if [ -f src/aria2c ]; then
          file src/aria2c
          ls -la src/aria2c
        elif [ -f src/.libs/aria2c ]; then
          file src/.libs/aria2c
          ls -la src/.libs/aria2c
        else
          echo "在常规位置未找到aria2c可执行文件，搜索整个src目录..."
          find src -name "aria2c" -type f
        fi
        
    - name: Run tests
      run: |
        # 运行测试，保存返回状态
        make -j"$(nproc 2> /dev/null || sysctl -n hw.ncpu)" check || echo "测试失败，状态码: $?"
        
    - name: Create artifacts directory
      if: always()
      run: |
        mkdir -p artifacts
        echo "检查src目录下的文件:"
        ls -la src/ | grep -E 'aria2c|\.libs' || echo "src目录下没有找到aria2c相关文件"
        
        echo "检查src/.libs目录(如果存在):"
        if [ -d src/.libs ]; then
          ls -la src/.libs/ || echo "src/.libs/目录为空"
        else
          echo "src/.libs/目录不存在"
        fi
        
        echo "尝试查找aria2c文件:"
        find src -name "aria2c*" -type f || echo "在src目录下未找到任何aria2c文件"
        
        # 尝试从多个可能的位置复制aria2c
        ARIA2C_PATH=""
        if [ -f src/aria2c ]; then
          ARIA2C_PATH="src/aria2c"
        elif [ -f src/.libs/aria2c ]; then
          ARIA2C_PATH="src/.libs/aria2c"
        else
          # 搜索整个项目目录
          ARIA2C_PATH=$(find . -name "aria2c" -type f -perm -u+x | head -1)
        fi
        
        if [ -n "$ARIA2C_PATH" ]; then
          echo "找到可执行文件: $ARIA2C_PATH，复制到构件目录"
          cp -f "$ARIA2C_PATH" artifacts/
          file artifacts/aria2c || echo "无法确定复制后的文件类型"
          ls -la artifacts/aria2c || echo "复制后文件不存在"
        else
          echo "未找到aria2c可执行文件，复制libaria2.a库文件"
          # 如果没有找到可执行文件，至少复制库文件作为临时解决方案
          if [ -f src/.libs/libaria2.a ]; then
            cp -f src/.libs/libaria2.a artifacts/
            echo "已复制libaria2.a到构件目录"
          fi
        fi
        
        # 复制日志文件
        cp -f config.log artifacts/ 2>/dev/null || echo "config.log not found"
        
        # 验证构件目录内容
        echo "构件目录内容:"
        ls -la artifacts/

    - name: Upload build artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: aria2-${{ matrix.os }}-${{ matrix.compiler }}-${{ matrix.crypto }}-${{ matrix.bittorrent }}
        path: artifacts/
        retention-days: 7
